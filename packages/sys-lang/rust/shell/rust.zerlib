#!/bin/false
# shellcheck shell=bash # This file is used only for sourcing

# Maintainers: Add your noticeshere, will be interpreted as changelog
# FIXME: Implement interpretation for changelog
###@ Created by Jacob Hrbek <kreyren@rixotstudio.cz> under GPL3 license <https://www.gnu.org/licenses/gpl-3.0.en.html> in 2020/04/02 - 05:58 CET
###@ Initial configuration based on package made for paludis by Jacob Hrbek <kreyren@rixotstudio.cz> in 2020/04/10 - 19:15 CET

# Maintainers: Maintain this documentation which is going to be interpreted as documentation for the package
# FIXME: Implement interpretation for documenation
###! Exlib used to provide a logic for rustc compilation
###! Requires:
###! - git [FIXME: Why?]
###! - curl (on Unix) -- To fetch the binaries
###! - pkg-config (on Unix, used to figure out the libssl headers/libraries)
###! - OpenSSL headers (only for Unix, this is the libssl-dev package on ubuntu)
###! Procedure:
###! 1. Fetch the repository https://github.com/rust-lang/rust
###! 1.1. On systems without rustc you need to download binary release provided by rustlang project from https://static.rust-lang.org/dist/ and set relevant variables to the full path of executables
###! 2. Compile it and install it
###! Code-style:
###! - Indentation one tab (	)
###! - Sanitize everything
###! - Write in POSIX sh syntax where possible and add notices for things that cannot be used in POSIX shell
###! - Avoid using `edo` where possible, expecting helpful messages
###! - Do not remove unused phases in case we ever need them
###! Additional info:
###! - To build this project you have to use a one minor version less static!
###! - Notice that GitHub doesn't give us submodules and it also is missing all of the vendored deps -> Use https://static.rust-lang.org/dist/rustc-$PV-src.tar.gz
###! - releases https://github.com/rust-lang/rust/releases
###! Informations for maintainers:
###! - This package supports GNU philosophy for platform support (https://www.gnu.org/prep/maintain/html_node/Platforms.html) -> Write the code in such a way that woudn't prevent a support of other kernels and platforms in general. The intention here is to avoid rewriting in the future
###! - For python flag -- Python 3.8 is not supported (FIXME: tracking needed)

# NOTICE: https://github.com/rust-lang/rust/blob/1.42.0/src/bootstrap/config.rs#L387-L393 -> Implement in documentation

# NOTICE: This is implemented logic from https://github.com/rust-lang/rust/blob/1.42.0/x.py

### METADATA ###

# FIXME-QA: Adapt `shellcheck source="..."` so that we can get rit of SC2034 disables

# shellcheck disable=SC2034 # Metadata variables for paludis
ORGANIZATION="rust-lang"
# shellcheck disable=SC2034 # Metadata variables for paludis
SUMMARY="Rustlang compiler"
# shellcheck disable=SC2034 # Metadata variables for paludis
# FIXME-TEST: Add test for 100 chars
DESCRIPTION="FIXME-DOCS: Add description" # max 100 chars
# shellcheck disable=SC2034 # Metadata variables for paludis
HOMEPAGE="https://github.com/rust-lang/rust"
# shellcheck disable=SC2034 # Metadata variables for paludis
LICENCES="
	Apache-2.0 [[ note = [ main license ] ]]
	MIT [[ note = [ FIXME purpose ] ]]"
# FIXME: Add more BUGS_TO references based on options used
# shellcheck disable=SC2034 # Metadata variables for paludis
BUGS_TO="kreyren@rixotstudio.cz"
# shellcheck disable=SC2034 # Metadata variables for paludis
#UPSTREAM_CHANGELOG="https://... [[ lang = en ]]"
# POSIX: Arrays are not supported on POSIX sh
# shellcheck disable=SC2034 # Metadata variables for paludis
UPSTREAM_DOCUMENTATION=(
	"https://doc.rust-lang.org/rustc/ [[ lang = en description = [ The rustc book ] ]]"
)
# POSIX: Arrays are not supported on POSIX sh
# shellcheck disable=SC2034 # Metadata variables for paludis
UPSTREAM_RELEASE_NOTES=(
	"https://github.com/rust-lang/rust/blob/master/RELEASES.md [[ lang = en description = [ Upstream release notes ] ]]"
)

### LOGIC ###

# DO_NOT_MERGE: Remove for merge
DEBUG="yes"

# INFO(kreyren): This does not seem to allow logic based on options
# Example URL: https://github.com/rust-lang/rust/archive/1.42.0.tar.gz
#require github [ user="$ORGANIZATION" tag="$PV" project="rust" ]

# Provide logic for DEP_PV where we need one minor version lower to build
if [ "$PV" = "1.42.0" ]; then
	DEP_PV="1.41.1"
else
	die 256 "Unexpected happend while processing DEP_PV, unsupported PV parsed?"
fi
# FIXME: Allow manual installation
# FIXME(kreyren): We can use github.exlib, but the use is apparently invalid? check code in LOGIC
# FIXME: The -> rustc-$PV.tar.gz does not work?
# FIXME: We can also use nightly build for this
# FIXME: Do not hardcore 20-02-27
# HOLD: https://static.rust-lang.org/dist/2020-02-27/rust-nightly-x86_64-unknown-linux-gnu.tar.xz
# shellcheck disable=SC2034 # Metadata variables for paludis
DOWNLOADS="
	!git? (
		https://static.rust-lang.org/dist/rustc-$PV-src.tar.gz -> rustc-$PV.tar.gz
	)
	!providers:rustc? (
		https://static.rust-lang.org/dist/2020-02-27/rust-$DEP_PV-x86_64-unknown-linux-gnu.tar.gz
	)
"

# NOTICE: If providers:rustc is not present then we expect to use binaries
# Maintainers: All entries should have description to know why is it required
# shellcheck disable=SC2034 # Metadata variables for paludis
DEPENDENCIES="
	build:
		providers:llvm? (
			dev-lang/llvm [[
				description = [ Required for rustlang backend for optimizations and emitting machine code ]
				url = [ https://llvm.org/ ]
			]]
		)
		app-arch/tar [[
			description = [ Required to extract sources ]
			url = [ https://www.gnu.org/software/tar/ ]
		]]
	suggestion:
		sys-apps/cargo [[
			description = [ Package manager for rustlang ]
			url = [ https://github.com/rust-lang/cargo/ ]
		]]
"

# shellcheck disable=SC2034 # Metadata variables for paludis
REMOTE_IDS="github:$ORGANIZATION/$PN"

# NOTICE: We have to set WORK because the name of paludis package and package itself is different
# FIXME: There seems to be a bug in paludis that changes the name of exported source seemingly on random
WORK="$WORKBASE/rustc-1.42.0-src"

# shellcheck disable=SC2034 # Metadata variables for paludis
SLOT="0"
# FIXME: Investigate
LLVM_SLOT="9"

# FIXME: Commented out targets are also supported by the package
# POSIX: Arrays are not supported on POSIX sh
# shellcheck disable=SC2034 # Medatada variable for paludis
KERNEL=(
	"Linux"
	#"Hurd"
	#"Darwin"
	#"Redox"
	#"Windows"
)

# FIXME: Commented out targets are also supported and need implementation
# FIXME: Embedded is apparently also supported and should be adapted
# POSIX: Arrays are not supported on POSIX sh
# shellcheck disable=SC2034 # Metadata variables for paludis
CROSS_COMPILE_TARGETS=(
	# GNU - 64
	"x86_64-pc-linux-gnu"
	#"x86_64-pc-freebsd-gnu"
	#"x86_64-pc-hurd-gnu"
	#"x86_64-pc-redox-gnu"
	#"x86_64-pc-darwin-gnu"
	#"x86_64-pc-mingw-gnu"
	#"x86_64-unknown-linux-gnu"
	# GNU - 32
	#"i686-pc-linux-gnu"
	#"i686-pc-freebsd-gnu"
	#"i686-pc-hurd-gnu"
	#"i686-pc-redox-gnu"
	#"i686-pc-darwin-gnu"
	#"i686-pc-mingw-gnu"
	#"i686-unknown-linux-gnu"
	# MUSL - 64
	#"x86_64-pc-linux-musl"
	#"x86_64-pc-freebsd-musl"
	#"x86_64-pc-hurd-musl"
	#"x86_64-pc-redox-musl"
	#"x86_64-pc-darwin-musl"
	#"x86_64-pc-mingw-musl"
	#"x86_64-unknown-linux-musl"
	# MUSL - 32
	#"i686-pc-linux-musl"
	#"i686-pc-freebsd-musl"
	#"i686-pc-hurd-musl"
	#"i686-pc-redox-musl"
	#"i686-pc-darwin-musl"
	#"i686-pc-mingw-musl"
	#"i686-unknown-linux-musl"
)

# FIXME: Paludis does not recognize KERNEL variable
# FIXME: Implement ccache
# FIXME: Implement ninja
# FIXME: Implement experimental
# shellcheck disable=SC2034 # Metadata variables for paludis
MYOPTIONS="
	exheredrey [[ description = [ INTERNAL USE ONLY ] ]]
	lto [[ description = [ Enable Link Time Optimization (LTO) ] ]]
	thin-lto [[ description = [ FIXME ] ]]
	python [[ description = [ Build target using upstream provided python script ] ]]
	docs [[ description = [ Build target with documentation ] ]]
	compiler-docs [[ description = [ Provide documentation for the compiler ] ]]
	debug [[ description = [ Build target in debug mode (not recommended for production system) ] ]]
	git [[ description = [ Allow fetching git sources in case we are unable to fetch the tarball ] ]]
	providers:
		rustc
		llvm
	( targets: ${CROSS_COMPILE_TARGETS[*]} ) [[ number-selected = at-least-one ]]"
	# kernel:
	# 	linux
	# 	freebsd
	# 	hurd
	# 	redox
	# 	windows
	# 	darwin"

pkg_pretend() {
	default
}

pkg_nofetch() {
	default
}

src_fetch_extra() {
	default
}

pkg_setup() {
	default
}

src_unpack() {
	exdebug "Variable ARCHIVES stores following value(s): '$ARCHIVES' in function ${FUNCNAME[0]}"

	# FIXME: Implement logic for non-tar archives
	# FIXME: This does not allow renaming from DOWNLOADS variable above
	# Check if there is anything to extract
	if [ -n "$ARCHIVES" ]; then
		# Process all archives
		for archive in $ARCHIVES; do
			# Continue if the archive is not extracted already
			if [ ! -d "$WORKBASE/${archive%%.tar.??}" ]; then
				# Extract the archive if it's present
				if [ -e "$FETCHEDDIR/$archive" ]; then
					einfo "Extracting archive '$archive' to WORKBASE as instructed.."r
					# FIXME: This may fail on older versions of tar -> Supply -z flag accordingly
					tar xpf "$FETCHEDDIR/$archive" -C "$WORKBASE/${archive%%.tar.??}" || die 1 "Unable to extract archive '$FETCHEDDIR/$archive' to '$WORKBASE'"
					einfo "Archive '$archive' has been sucessfully extracted instructed WORKBASE"
				elif [ ! -e "$FETCHEDDIR/$archive" ]; then
					die 1 "Expected archive '$FETCHEDDIR/$archive' does not exists, unable to extract"
				else
					die 256 "Unexpected happend while trying to extract archive '$archive' in ${FUNCNAME[0]}"
				fi
			elif [ -d "$WORKBASE/${archive%%.tar.??}" ]; then
				einfo "Archive '$archive' is already extracted, skipping.."
			else
				die 256 "Unexpected happend while processing archive '$archive' in ${FUNCNAME[0]}"
			fi
		done
	elif [ -z "$ARCHIVES" ]; then
		einfo "Variable '$ARCHIVES' is blank, nothing to extract.."
	else
		die 256 "Unexpected happend while processing variable ARCHIVES with value '$ARCHIVES'"
	fi

	die ping
	# default # fuck default
}

# Notice: End-users usually inject their own patches in this phase for example using https://gitlab.exherbo.org/kreyren/marty/-/blob/leonid-x86_64-bedrock-gnu/hooks/ebuild_metadata_pre/user-patches.bash
src_prepare() {
	# LTO
	if option lto; then die 1 "LTO optimization is not yet implemented"; fi

	if ! option providers:rustc; then
		# Check for expected directory
		if [ -d "$WORKBASE/rust-$DEP_PV-x86_64-unknown-linux-gnu" ]; then
			mkdir "$WORKBASE/sysroot" || die 1 "Unable to create a sysroot directory"
			{
				cp -r "$WORKBASE/rust-$DEP_PV-x86_64-unknown-linux-gnu/rustc/." "$WORKBASE/sysroot/"
				cp -r "$WORKBASE/rust-$DEP_PV-x86_64-unknown-linux-gnu/rustfmt-preview/." "$WORKBASE/sysroot/"
				cp -r "$WORKBASE/rust-$DEP_PV-x86_64-unknown-linux-gnu/cargo/." "$WORKBASE/sysroot/"
				cp -r "$WORKBASE/rust-$DEP_PV-x86_64-unknown-linux-gnu/rust-std-x86_64-unknown-linux-gnu/." "$WORKBASE/sysroot/"
			} || die 1 "Unable to parse require bootstrap files"
			# NOTICE: We need to export this for cargo to see it
			export RUSTC="$WORKBASE/sysroot/bin/rustc"
			export CARGO="$WORKBASE/sysroot/bin/cargo"
		fi
	elif option providers:rustc; then
		die 1 "Compiling with used rustc is currently not implemented"
	else
		die 256 "Unexpected happend while processing providers for rustc"
	fi

	# Make sure that RUSTC is executable
	if [ ! -x "$RUSTC" ]; then
		eerror "Full path of expected rustc '$RUSTC' that is expected to be stored in RUSTC varible is not executable, this may result in failure to build later"
	elif [ -x "$RUSTC" ]; then
		exdebug "Full path of rustc stored in variable RUSTC '$RUSTC' is executable as expected"
	else
		die 256 "Unexpected happend while checking for executability of rustc which full path is stored in RUSTC variable '$RUSTC'"
	fi

	# Make sure that CARGO is executable
	if [ ! -x "$CARGO" ]; then
		eerror "Full path of expected cargo '$CARGO' that is expected to be stored in CARGO varible is not executable, this may result in failure to build later"
	elif [ -x "$CARGO" ]; then
		exdebug "Full path of rustc stored in variable RUSTC '$CARGO' is executable as expected"
	else
		die 256 "Unexpected happend while checking for executability of rustc which full path is stored in RUSTC variable '$CARGO'"
	fi

	# Make sure that RUSTC is executable
	if [ ! -x "$RUSTC" ]; then
		eerror "Full path of expected cargo '$RUSTC' that is expected to be stored in CARGO varible is not executable, this may result in failure to build later"
	elif [ -x "$RUSTC" ]; then
		exdebug "Full path of rustc stored in variable RUSTC '$RUSTC' is executable as expected"
	else
		die 256 "Unexpected happend while checking for executability of rustc which full path is stored in RUSTC variable '$RUSTC'"
	fi
}

src_configure() {
	# Configure Cargo.toml
	# FIXME: Generate configuration, see https://doc.rust-lang.org/cargo/reference/config.html
	if ! option providers:rustc; then
		mkdir "$WORK/.cargo"
		cat <<-EOF > "$WORK/.cargo/config"
			[source.crates-io]
			replace-with = "vendored-sources"
			registry = "https://example.com"
			[source.vendored-sources]
			directory = "$WORK/vendor"
		EOF
		# FIXME: Implement better management for flags (end-user's bashrc are using flags per platform)
		# FIXME: There is an option that specified using linker -> Do we want to use it?
		# FIXME: Implement build management (see 'build' under build section)
		# FIXME: Implement host management (see 'host' under build section, required for cross-platform)
		# FIXME: Implement target management
		# FIXME: Add comments above the values
		# FIXME: Add the options ONLY IF they are present in config.toml.example
		cat <<-EOF > "$WORK/config.toml"
			# Sample TOML configuration file for building Rust.
			#
			# To configure rustbuild, copy this file to the directory from which you will be
			# running the build, and name it config.toml.
			#
			# All options are commented out by default in this file, and they're commented
			# out with their default values. The build system by default looks for
			# 'config.toml' in the current directory of a build for build configuration, but
			# a custom configuration file can also be specified with '--config' to the build
			# system.

			# =============================================================================
			# Tweaking how LLVM is compiled
			# =============================================================================
			[llvm]
			# Indicates whether LLVM rebuild should be skipped when running bootstrap. If
			# this is 'false' then the compiler's LLVM will be rebuilt whenever the built
			# version doesn't have the correct hash. If it is 'true' then LLVM will never
			# be rebuilt. The default value is 'false'.
			#skip-rebuild = false

			# Indicates whether the LLVM build is a Release or Debug build
			$(option debug "optimize = false")
			$(option !debug "optimize = true")

			cflags = "$CFLAGS"
			cxxflags = "$CXXFLAGS"
			ldflags = "$LDFLAGS"

			[build]
			# Instead of downloading the src/stage0.txt version of the compiler
			# specified, use this rustc binary instead as the stage0 snapshot compiler.
			rustc = "$WORKBASE/sysroot/bin/rustc"

			# Instead of downloading the src/stage0.txt version of Cargo specified, use
			# this Cargo binary instead to build all Rust code
			cargo = "$WORKBASE/sysroot/bin/cargo"

			# Instead of download the src/stage0.txt version of rustfmt specified,
			# use this rustfmt binary instead as the stage0 snapshot rustfmt.
			rustfmt = "$WORKBASE/sysroot/bin/rustfmt"

			$(option docs "# Flag to specify whether any documentation is built. If false, rustdoc and friends will still be compiled but they will not be used to generate any documentation.")
			$(option docs "docs = true")

			$(option compiler-docs "# Indicate whether the compiler should be documented in addition to the standard library and facade crates.")
			$(option compiler-docs "compiler-docs = true")

			# Indicate whether git submodules are managed and updated automatically.
			#submodules = true

			# Update git submodules only when the checked out commit in the submodules differs
			# from what is committed in the main rustc repo.
			#fast-submodules = true

			# The path to (or name of) the GDB executable to use. This is only used for
			# executing the debuginfo test suite.
			#gdb = "gdb"

			# The node.js executable to use. Note that this is only used for the emscripten
			# target when running tests, otherwise this can be omitted.
			#nodejs = "node"

			# Python interpreter to use for various tasks throughout the build, notably
			# rustdoc tests, the lldb python interpreter, and some dist bits and pieces.
			# Note that Python 2 is currently required.
			#
			# Defaults to python2.7, then python2. If neither executable can be found, then
			# it defaults to the Python interpreter used to execute x.py.
			#python = "python2.7"

			# Force Cargo to check that Cargo.lock describes the precise dependency
			# set that all the Cargo.toml files create, instead of updating it.
			#locked-deps = false

			$(option !providers:rustc "# Indicate whether the vendored sources are used for Rust dependencies or not")
			$(option !providers:rustc "vendor = true")

			# Typically the build system will build the Rust compiler twice. The second
			# compiler, however, will simply use its own libraries to link against. If you
			# would rather to perform a full bootstrap, compiling the compiler three times,
			# then you can set this option to true. You shouldn't ever need to set this
			# option to true.
			#full-bootstrap = false

			# Enable a build of the extended Rust tool set which is not only the compiler
			# but also tools such as Cargo. This will also produce "combined installers"
			# which are used to install Rust and Cargo together. This is disabled by
			# default. The 'tools' option (immediately below) specifies which tools should
			# be built if 'extended = true'.
			#extended = false

			# Installs chosen set of extended tools if 'extended = true'. By default builds all.
			# If chosen tool failed to build the installation fails. If 'extended = false', this
			# option is ignored.
			#tools = ["cargo", "rls", "clippy", "rustfmt", "analysis", "src"]

			# Verbosity level: 0 == not verbose, 1 == verbose, 2 == very verbose
			#verbose = 0

			# Build the sanitizer runtimes
			#sanitizers = false

			# Build the profiler runtime
			#profiler = false

			# Indicates whether the native libraries linked into Cargo will be statically
			# linked or not.
			#cargo-native-static = false

			# Run the build with low priority, by setting the process group's "nice" value
			# to +10 on Unix platforms, and by using a "low priority" job object on Windows.
			#low-priority = false

			# Arguments passed to the './configure' script, used during distcheck. You
			# probably won't fill this in but rather it's filled in by the './configure'
			# script.
			#configure-args = []

			# Indicates that a local rebuild is occurring instead of a full bootstrap,
			# essentially skipping stage0 as the local compiler is recompiling itself again.
			#local-rebuild = false

			# Print out how long each rustbuild step took (mostly intended for CI and
			# tracking over time)
			#print-step-timings = false

			# =============================================================================
			# General install configuration options
			# =============================================================================

			[install]
			# Instead of installing to /usr/local, install to this path instead.
			prefix = "$IMAGE/usr"

			# Where to install system configuration files
			# If this is a relative path, it will get installed in 'prefix' above
			sysconfdir = "$IMAGE/etc"

			# Where to install documentation in 'prefix' above
			docdir = "$IMAGE/share/doc/rust"

			# Where to install binaries in 'prefix' above
			bindir = "$IMAGE/bin"

			# Where to install libraries in 'prefix' above
			libdir = "$IMAGE/lib"

			# Where to install man pages in 'prefix' above
			mandir = "$IMAGE/share/man"

			# Where to install data in 'prefix' above (currently unused)
			datadir = "$IMAGE/share"

			# Where to install additional info in 'prefix' above (currently unused)
			infodir = "$IMAGE/share/info"

			# Where to install local state (currently unused)
			# If this is a relative path, it will get installed in 'prefix' above
			localstatedir = "$IMAGE/var/lib"

			# =============================================================================
			# Options for compiling Rust code itself
			# =============================================================================
			[rust]

			# Whether or not to optimize the compiler and standard library.
			# WARNING: Building with optimize = false is NOT SUPPORTED. Due to bootstrapping,
			# building without optimizations takes much longer than optimizing. Further, some platforms
			# fail to build without this optimization (c.f. #65352).
			$(option debug "optimize = false")
			$(option !debug "optimize = true")

			# Indicates that the build should be configured for debugging Rust. A
			# 'debug'-enabled compiler and standard library will be somewhat
			# slower (due to e.g. checking of debug assertions) but should remain
			# usable.
			#
			# Note: If this value is set to 'true', it will affect a number of
			#       configuration options below as well, if they have been left
			#       unconfigured in this file.
			#
			# Note: changes to the 'debug' setting do *not* affect 'optimize'
			#       above. In theory, a "maximally debuggable" environment would
			#       set 'optimize' to 'false' above to assist the introspection
			#       facilities of debuggers like lldb and gdb. To recreate such an
			#       environment, explicitly set 'optimize' to 'false' and 'debug'
			#       to 'true'. In practice, everyone leaves 'optimize' set to
			#       'true', because an unoptimized rustc with debugging
			#       enabled becomes *unusably slow* (e.g. rust-lang/rust#24840
			#       reported a 25x slowdown) and bootstrapping the supposed
			#       "maximally debuggable" environment (notably libstd) takes
			#       hours to build.
			#
			$(option debug "debug = true")
			$(option !debug "debug = false")

			# Number of codegen units to use for each compiler invocation. A value of 0
			# means "the number of cores on this machine", and 1+ is passed through to the
			# compiler.
			#codegen-units = 1

			# Sets the number of codegen units to build the standard library with,
			# regardless of what the codegen-unit setting for the rest of the compiler is.
			#codegen-units-std = 1

			# Whether or not debug assertions are enabled for the compiler and standard
			# library.
			#debug-assertions = false

			# Debuginfo level for most of Rust code, corresponds to the '-C debuginfo=N' option of 'rustc'.
			# '0' - no debug info
			# '1' - line tables only
			# '2' - full debug info with variable and type information
			# Can be overriden for specific subsets of Rust code (rustc, std or tools).
			# Debuginfo for tests run with compiletest is not controlled by this option
			# and needs to be enabled separately with 'debuginfo-level-tests'.
			$(option debug "debuginfo-level = 2")
			$(option !debug "#debuginfo-level = if debug { 2 } else { 0 }")

			# Debuginfo level for the compiler.
			#debuginfo-level-rustc = debuginfo-level

			# Debuginfo level for the standard library.
			#debuginfo-level-std = debuginfo-level

			# Debuginfo level for the tools.
			#debuginfo-level-tools = debuginfo-level

			# Debuginfo level for the test suites run with compiletest.
			# FIXME(#61117): Some tests fail when this option is enabled.
			#debuginfo-level-tests = 0

			# Whether or not 'panic!'s generate backtraces (RUST_BACKTRACE)
			#backtrace = true

			# Whether to always use incremental compilation when building rustc
			#incremental = false

			# Build a multi-threaded rustc
			#parallel-compiler = false

			# The default linker that will be hard-coded into the generated compiler for
			# targets that don't specify linker explicitly in their target specifications.
			# Note that this is not the linker used to link said compiler.
			#default-linker = "cc"

			# The "channel" for the Rust build to produce. The stable/beta channels only
			# allow using stable features, whereas the nightly and dev channels allow using
			# nightly features
			#channel = "dev"

			# The root location of the MUSL installation directory.
			#musl-root = "..."

			# By default the 'rustc' executable is built with '-Wl,-rpath' flags on Unix
			# platforms to ensure that the compiler is usable by default from the build
			# directory (as it links to a number of dynamic libraries). This may not be
			# desired in distributions, for example.
			#rpath = true

			# Emits extraneous output from tests to ensure that failures of the test
			# harness are debuggable just from logfiles.
			$(option debug "verbose-tests = true")
			$(option !debug "verbose-tests = false")

			# Flag indicating whether tests are compiled with optimizations (the -O flag).
			# Kreyren: Sane?
			optimize-tests = true

			# Flag indicating whether codegen tests will be run or not. If you get an error
			# saying that the FileCheck executable is missing, you may want to disable this.
			# Also see the target's llvm-filecheck option.
			#codegen-tests = true

			# Flag indicating whether git info will be retrieved from .git automatically.
			# Having the git information can cause a lot of rebuilds during development.
			# Note: If this attribute is not explicitly set (e.g. if left commented out) it
			# will default to true if channel = "dev", but will default to false otherwise.
			#ignore-git = true

			# When creating source tarballs whether or not to create a source tarball.
			#dist-src = false

			# After building or testing extended tools (e.g. clippy and rustfmt), append the
			# result (broken, compiling, testing) into this JSON file.
			#save-toolstates = "/path/to/toolstates.json"

			# This is an array of the codegen backends that will be compiled for the rustc
			# that's being compiled. The default is to only build the LLVM codegen backend,
			# and currently the only standard option supported is '"llvm"'
			#codegen-backends = ["llvm"]

			# Indicates whether LLD will be compiled and made available in the sysroot for
			# rustc to execute.
			#lld = false

			# Indicates whether some LLVM tools, like llvm-objdump, will be made available in the
			# sysroot.
			#llvm-tools = false

			# Indicates whether LLDB will be made available in the sysroot.
			# This is only built if LLVM is also being built.
			#lldb = false

			# Whether to deny warnings in crates
			#deny-warnings = true

			# Print backtrace on internal compiler errors during bootstrap
			#backtrace-on-ice = false

			# Whether to verify generated LLVM IR
			#verify-llvm-ir = false

			# Compile the compiler with a non-default ThinLTO import limit. This import
			# limit controls the maximum size of functions imported by ThinLTO. Decreasing
			# will make code compile faster at the expense of lower runtime performance.
			# If 'incremental' is set to true above, the import limit will default to 10
			# instead of LLVM's default of 100.
			#thin-lto-import-instr-limit = 100

			# Map all debuginfo paths for libstd and crates to '/rust/\$sha/\$crate/...',
			# generally only set for releases
			#remap-debuginfo = false

			# Link the compiler against 'jemalloc', where on Linux and OSX it should
			# override the default allocator for rustc and LLVM.
			#jemalloc = false

			# Run tests in various test suites with the "nll compare mode" in addition to
			# running the tests in normal mode. Largely only used on CI and during local
			# development of NLL
			#test-compare-mode = false

			# Use LLVM libunwind as the implementation for Rust's unwinder.
			#llvm-libunwind = false

			# =============================================================================
			# Options for specific targets
			#
			# Each of the following options is scoped to the specific target triple in
			# question and is used for determining how to compile each target.
			# =============================================================================
			[target.x86_64-unknown-linux-gnu]

			# C compiler to be used to compiler C code. Note that the
			# default value is platform specific, and if not specified it may also depend on
			# what platform is crossing to what platform.
			#cc = "cc"

			# C++ compiler to be used to compiler C++ code (e.g. LLVM and our LLVM shims).
			# This is only used for host targets.
			#cxx = "c++"

			# Archiver to be used to assemble static libraries compiled from C/C++ code.
			# Note: an absolute path should be used, otherwise LLVM build will break.
			#ar = "ar"

			# Ranlib to be used to assemble static libraries compiled from C/C++ code.
			# Note: an absolute path should be used, otherwise LLVM build will break.
			#ranlib = "ranlib"

			# Linker to be used to link Rust code. Note that the
			# default value is platform specific, and if not specified it may also depend on
			# what platform is crossing to what platform.
			#linker = "cc"

			# Path to the 'llvm-config' binary of the installation of a custom LLVM to link
			# against. Note that if this is specified we don't compile LLVM at all for this
			# target.
			$(option providers:llvm "llvm-config = \"/usr/x86_64-pc-linux-gnu/lib/llvm/${LLVM_SLOT}/bin/llvm-config\"")
			$(option !providers:llvm "#llvm-config = \"../path/to/llvm/root/bin/llvm-config\"")

			# Normally the build system can find LLVM's FileCheck utility, but if
			# not, you can specify an explicit file name for it.
			$(option providers:llvm "llvm-filecheck = \"/usr/x86_64-pc-linux-gnu/lib/llvm/${LLVM_SLOT}/bin/FileCheck\"")
			$(option !providers:llvm "#llvm-filecheck = \"/path/to/FileCheck\"")

			# If this target is for Android, this option will be required to specify where
			# the NDK for the target lives. This is used to find the C compiler to link and
			# build native code.
			#android-ndk = "/path/to/ndk"

			# Force static or dynamic linkage of the standard library for this target. If
			# this target is a host for rustc, this will also affect the linkage of the
			# compiler itself. This is useful for building rustc on targets that normally
			# only use static libraries. If unset, the target's default linkage is used.
			#crt-static = false

			# The root location of the MUSL installation directory. The library directory
			# will also need to contain libunwind.a for an unwinding implementation. Note
			# that this option only makes sense for MUSL targets that produce statically
			# linked binaries
			#musl-root = "..."

			# The root location of the 'wasm32-wasi' sysroot.
			#wasi-root = "..."

			# Used in testing for configuring where the QEMU images are located, you
			# probably don't want to use this.
			#qemu-rootfs = "..."

			# =============================================================================
			# Distribution options
			#
			# These options are related to distribution, mostly for the Rust project itself.
			# You probably won't need to concern yourself with any of these options
			# =============================================================================
			[dist]

			# This is the folder of artifacts that the build system will sign. All files in
			# this directory will be signed with the default gpg key using the system 'gpg'
			# binary. The 'asc' and 'sha256' files will all be output into the standard dist
			# output folder (currently 'build/dist')
			#
			# This folder should be populated ahead of time before the build system is
			# invoked.
			#sign-folder = "path/to/folder/to/sign"

			# This is a file which contains the password of the default gpg key. This will
			# be passed to 'gpg' down the road when signing all files in 'sign-folder'
			# above. This should be stored in plaintext.
			#gpg-password-file = "path/to/gpg/password"

			# The remote address that all artifacts will eventually be uploaded to. The
			# build system generates manifests which will point to these urls, and for the
			# manifests to be correct they'll have to have the right URLs encoded.
			#
			# Note that this address should not contain a trailing slash as file names will
			# be appended to it.
			#upload-addr = "https://example.com/folder"

			# Whether to build a plain source tarball to upload
			# We disable that on Windows not to override the one already uploaded on S3
			# as the one built on Windows will contain backslashes in paths causing problems
			# on linux
			#src-tarball = true
			#

			# Whether to allow failures when building tools
			#missing-tools = false
		EOF
	fi
}

src_compile() {
	# FIXME: We should check more relevant file i.e WORK/src/bootstrap/Config.toml
	if [ -f "$WORK/src/rustc/rustc.rs" ]; then
		if ! option providers:rustc; then
			# FIXME: Needs proper implementation once we have a working logic
		(
			# NOTICE: config.toml is the configuration for the builsystem, Cargo.toml is part of the sources you downloaded and is what Cargo needs (https://doc.rust-lang.org/cargo/reference/config.html), these are the only config.toml docs  that exist https://github.com/rust-lang/rust/blob/1.42.0/config.toml.example
			# FIXME: This is required for cargo to be able to fetch stuff from cargo index, this has to be sanitized
			#esandbox disable_net || die 1 "esandbox failed"
			# FIXME: This is required for cargo to be able to create the compiled targed, this has to be sanitized
			esandbox disable_path || die 1 "We are unable to disable path sandboxing"
			# CC is banned by distribution
			#CC="$(exhost --target)-cc"
			bannedrey cc # HOTFIX: insufficient informations for proper implementation
			#env RUSTC_BOOTSTRAP=1 CARGO_INSTALL_ROOT="$IMAGE" RUSTC="/bedrock/strata/exherbo/var/tmp/paludis/build/sys-libs-rustc-1.42.0/work/sysroot/bin/rustc" LD_LIBRARY_PATH="/bedrock/strata/exherbo/var/tmp/paludis/build/sys-libs-rustc-1.42.0/work/sysroot/lib" "/bedrock/strata/exherbo/var/tmp/paludis/build/sys-libs-rustc-1.42.0/work/sysroot/bin/cargo" run --manifest-path "/bedrock/strata/exherbo/var/tmp/paludis/build/sys-libs-rustc-1.42.0/work/rustc-1.42.0-src/src/rustc/Cargo.toml" -p bootstrap --bin bootstrap build
			LD_LIBRARY_PATH="$WORKBASE/sysroot/lib"
			# NOTICE: Requires for non-nightly build
			# FIXME: Implement logic on using nightly build
			export RUSTC_BOOTSTRAP=1
			export BUILD="x86_64-unknown-linux-gnu"
			export SRC="$WORK"
			export BUILD_DIR="$WORKBASE/build"
			export CARGO_TARGET_DIR="$BUILD_DIR/bootstrap"
			# NOTICE: frozen argument is required for cargo to not fetch dependencies from the web -> No need for "esandbox disable_net"
			"$CARGO" build --frozen --manifest-path "$WORK/src/bootstrap/Cargo.toml" || die 1 "Unable to compile bootstrap"
			# FIXME-DOCS: Why do we have to build this twice?
			"$BUILD_DIR/bootstrap/debug/bootstrap" build || die 1 "Unable to compile target using bootstrap"
			#"$CARGO" run --manifest-path "$WORKBASE/Cargo.toml" -p bootstrap --bin bootstrap build
			###"$CARGO" build || die 1 "Unable to compile rustc target"
			esandbox enable_path || die 1 "We are unable to enable path sandboxing"
		)
		fi
	elif [ ! -f "$WORK/src/rustc/rustc.rs" ]; then
		die 1 "Expected file '$WORK/src/rustc/rustc.rs' is not present, unable to compile"
	else
		die 256 "Unexpected happend while compiling file '$WORKBASE/rust-1.41.1/src/rustc/rustc.rs'"
	fi
}

src_test() {
	default
}

src_test_expensive() {
	defaut
}

src_bench() {
	default
}

src_install() {
	if ! option providers:rustc; then
		export DESTDIR="$IMAGE"
		"$WORKBASE/build/bootstrap/debug/bootstrap" install || die 1 "Unable to install target in imagedir using bootstrap"
	elif option providers:rustc; then
		die unimplemented
	else
		die 256 "Unexpected happend while processing installation of $P"
	fi
}

pkg_preinst() {
	default
}

pkg_prerm() {
	default
}

pkg_postinst() {
	default
}

pkg_config() {
	default
}

pkg_info() {
	default
}
